import numpy as np

# Предположим, что данные в формате DataFrame с колонками "pickup_latitude", "pickup_longitude",
# "dropoff_latitude", "dropoff_longitude"
data = pd.DataFrame({
    'pickup_latitude': [55.751244, 55.7558, 55.7649],
    'pickup_longitude': [37.618423, 37.6176, 37.6113],
    'dropoff_latitude': [55.7607, 55.7455, 55.7382],
    'dropoff_longitude': [37.6246, 37.6034, 37.5902]
})

# Определим размеры ячейки (приблизительно 1 км)
MOSCOW_LATITUDE = 55.75
LATITUDE_GRID_SIZE = 1 / 111  # ~1 км по широте
LONGITUDE_GRID_SIZE = 1 / (111 * np.cos(np.radians(MOSCOW_LATITUDE)))  # ~1 км по долготе в Москве

# Функция для получения индекса ячейки по координатам
def get_grid_index(lat, lon, lat_grid_size, lon_grid_size):
    lat_idx = int(lat / lat_grid_size)
    lon_idx = int(lon / lon_grid_size)
    return lat_idx, lon_idx

# Добавляем индексы ячеек для точек посадки и высадки
data['pickup_grid'] = data.apply(lambda row: get_grid_index(
    row['pickup_latitude'], row['pickup_longitude'], LATITUDE_GRID_SIZE, LONGITUDE_GRID_SIZE), axis=1)

data['dropoff_grid'] = data.apply(lambda row: get_grid_index(
    row['dropoff_latitude'], row['dropoff_longitude'], LATITUDE_GRID_SIZE, LONGITUDE_GRID_SIZE), axis=1)

# Присваиваем уникальный идентификатор для каждой зоны
data['pickup_grid_id'] = data['pickup_grid'].apply(lambda x: f"{x[0]}_{x[1]}")
data['dropoff_grid_id'] = data['dropoff_grid'].apply(lambda x: f"{x[0]}_{x[1]}")

print(data[['pickup_grid_id', 'dropoff_grid_id']])


from sklearn.feature_extraction.text import TfidfVectorizer

# Initialize TfidfVectorizer
tfidf = TfidfVectorizer(max_features=1000)  # e.g., limit to 1000 features
X_tfidf = tfidf.fit_transform(train['text_column']).toarray()
import numpy as np

# Assuming 'other_features' is a DataFrame of other features
X_combined = np.hstack((X_tfidf, other_features.values))
from catboost import CatBoostClassifier

# Initialize CatBoost
model = CatBoostClassifier(iterations=500, learning_rate=0.1, depth=6)

# Fit model
model.fit(X_combined, y_train)

from sklearn.metrics import accuracy_score

y_pred = model.predict(X_combined_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

feature_importance = model.feature_importances_
sorted_idx = np.argsort(feature_importance)
fig = plt.figure(figsize=(15, 10))
plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align='center')
plt.yticks(range(len(sorted_idx)), np.array(X_eval.columns)[sorted_idx])
plt.title('Feature Importance')

import easyocr
from PIL import Image

# Инициализация считывателя с поддержкой русского языка
reader = easyocr.Reader(['ru', 'en'])  # Можно добавить несколько языков, например 'ru' и 'en'


import optuna
import catboost
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.datasets import load_breast_cancer

# Загружаем данные
data = load_breast_cancer()
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.2, random_state=42)

# Функция для оптимизации
def objective(trial):
    params = {
        "iterations": trial.suggest_int("iterations", 100, 1000, step=50),
        "depth": trial.suggest_int("depth", 4, 10),
        "learning_rate": trial.suggest_loguniform("learning_rate", 1e-3, 0.3),
        "l2_leaf_reg": trial.suggest_loguniform("l2_leaf_reg", 1e-3, 10),
        "border_count": trial.suggest_int("border_count", 10, 255),
        "bagging_temperature": trial.suggest_uniform("bagging_temperature", 0, 1),
        "random_strength": trial.suggest_uniform("random_strength", 0, 10),
        "boosting_type": "Plain",
        "eval_metric": "AUC",
        "loss_function": "Logloss",
        "verbose": 0
    }

    model = CatBoostClassifier(**params)
    
    score = cross_val_score(model, X_train, y_train, cv=5, scoring="roc_auc").mean()
    return score

# Запуск Optuna
study = optuna.create_study(direction="maximize")  # Максимизируем AUC
study.optimize(objective, n_trials=50)

# Вывод результатов
print("Лучшие параметры:", study.best_params)
print("Лучший AUC:", study.best_value)

# Укажите путь к изображению
image_path = "/Users/andrejboriskin/Downloads/Photos with Text.png"  # Замените на путь к вашему изображению
result = reader.readtext(image_path, detail=0)

# Вывод распознанного текста
print("Распознанный текст:", "\n".join(result))
